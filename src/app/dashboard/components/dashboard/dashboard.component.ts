import { Component, OnInit } from '@angular/core';
import { DashboardService } from '../../services/dashboard.service';
import { Task } from 'src/app/task/class/task';
import { Employee } from 'src/app/classes/employee';
import { TaskService } from 'src/app/task/services/task.service';
import { Status } from 'src/app/status/class/status';
import { Company } from 'src/app/company/class/company';
import { StatusService } from 'src/app/status/services/status.service';

@Component({
  selector: 'app-dashboard',
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.css']
})
export class DashboardComponent implements OnInit {

  employee!: Employee;
  company!: Company;
  employeeId: any;
  companyId: any;
  // to storing all parent task
  parentTaskData: Task[] = [];
  allParentTaskData = new Map();

  employees: Employee[] = [];
  allStatus: Status[] = [];
  childTaskData = new Map();

  constructor(
    private dashboardService: DashboardService,
    private taskService: TaskService,
    private statusService: StatusService
  ) {

    this.employeeId = localStorage.getItem('employeeId');
    this.companyId = localStorage.getItem('companyId');

    this.employee = {
      "employeeId": 1, // The "id" will be automatically generated by the database sequence
      "countryId": 1,
      "companyId": 1,
      "firstName": "Mayur",
      "lastName": "Patil",
      "birthDate": new Date("1998-08-23"),
      "employeeEmail": "mayur@gmail.com"
    }

    this.getCompanyById(this.employee.companyId);
  }

  ngOnInit(): void {
    this.initialization();
  }


  // calling default method when load component
  private initialization() {

    // for getting all employees
    this.getAllEmployees();

    // for getting all parent task
    const data = {
      status: 'ALL',
      createdBy: 0,
      assignedTo: 0,
      companyId: this.companyId,
      parentId: 0
    };
    this.getParentTask(data);
    this.getAllStatus();
  }

  // for gettign all employees
  private getAllEmployees() {
    this.dashboardService.getAllEmployees().subscribe(
      (response) => {
        this.employees = response;
        console.log(this.employees);

      },
      (error) => {
        console.log("Failed to get all employees");
      }
    );
  }

  // // for getting child task using parent id
  // onClickChild(task: Task) {
  //   this.taskService.getChildTaskByParentId(task.taskId).subscribe(
  //     (response) => {
  //       this.childTaskData.set(task.taskId, response);
  //       console.table(this.childTaskData);

  //     },
  //     (error) => {
  //       console.log("Failed to load child task!");

  //     }
  //   );
  // }

  // for fetching task using status, createdby, assigned to, companyId and parent Id
  getParentTask(data: any) {
    console.log(data);
    const status = data.status;
    const createdBy = data.createdBy;
    const assignedTo = data.assignedTo;
    const companyId = data.companyId;
    const parentId = data.parentId;

    this.taskService.getTasksByStatusAndCreatorAndAssigneeOfCompanyByCompanyIdId(parentId, status, createdBy, assignedTo, companyId).subscribe(
      (response) => {
        this.parentTaskData = response;
        console.log(this.parentTaskData);

      },
      (error) => {
        console.log("Failed to get parent task for status : " + status);

      }
    );
  }

  // for getting all status
  private getAllStatus() {
    this.statusService.getAllStatus().subscribe(
      (response) => {

        // stroign all status
        this.allStatus = response;
        console.log(this.allStatus);

      },
      (error) => {
        console.log("Failed to get all status");
      }
    );
  }

  getCompanyById(companyId: number) {
    this.company = this.dashboardService.getCompanyById(companyId);
  }
}
